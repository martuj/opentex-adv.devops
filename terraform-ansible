Terraform Labs Steps
====================

Login to GCP Console


###################################
Lab 1: Creating an VM Instance in GCP and Installing Terraform
###################################

Task 1: Installing Terraform on Ubuntu 22.04 operating system
=============================================================
After VM is ready:


vi terraform.sh

sudo apt update
sudo apt install wget unzip -y
wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
sudo apt update && sudo apt install terraform
terraform -v


save the file :wq

Provide the permission and run the script
----------------------------------------
sudo chmod +x terraform.sh 

. ./terraform.sh 

Create VM using terraform
===============================
1) Authenticate 
gcloud auth application-default login  
 
and follow the instructions

2) create dir test and create file
vi myfirstvm.tf 

provider "google" {
  project = "deloitte-team2"
  region  = "us-central1"
  zone    = "us-central1-a"
}

3) create file

vi resorce.tf 
resource "google_compute_instance" "vm_instance" {
  count = 2
  name = "ansible-node-${count.index}"
  machine_type = "e2-small"
  boot_disk {
    initialize_params {
      image = "ubuntu-2204-lts"
    }
  }

  network_interface {
    # A default network is created for all GCP projects
    network = "default"
    access_config {
    }
  }
}

save the file :wq-enter

Now run commands

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply
terraform destroy

============================================================================
Task-2: Null resources
----------------------------------------------------------------------------

vi  mynullresource.tf 


provider "google" {
  project = "deloitte-team2"
  region  = "us-central1"
  zone    = "us-central1-a"
}


# Create a Google Compute Engine instance
resource "google_compute_instance" "vm_instance" {
  name         = "example-instance"
  machine_type = "e2-micro"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
    }
  }

  network_interface {
    network = "default1"
    access_config {}
  }
}

# Use a null resource to execute a local script after the VM is created
resource "null_resource" "post_creation_script" {
  # Define the dependency on the VM instance
  depends_on = [google_compute_instance.vm_instance]

  # Define a local script to be executed
  provisioner "local-exec" {
    command = "echo 'VM instance created: ${google_compute_instance.vm_instance.name}' >> post_create.sh"
  }
}

output "instance_name" {
  value = google_compute_instance.vm_instance.name
}

save the file :wq enter


Run the commands

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply
terraform destroy

self task example2:-

resource "null_resource" "null_resource_simple" {
   triggers = {
      id = timestamp()
   }
   provisioner "local-exec" {
      command = "echo Hello World"
   }
}

======================================================================
taks:3 Remote exec
----------------------------------------------------------------------
# run this command to generate the ssh key 

ssh-keygen


# Create directory and create below file


vi remote.tf

provider "google" {
  project = "deloitte-team2"
  region  = "us-central1"
  zone    = "us-central1-a"
}


resource "google_compute_instance" "vm_instance" {
  name         = "example-instance"
  machine_type = "e2-micro"
  zone         = "us-central1-a"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-11"
    }
  }

  network_interface {
    network = "default1"
    access_config {}
  }

  metadata = {
    ssh-keys = "user:${file("~/.ssh/id_rsa.pub")}"
  }

  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = "user"                # Replace with the username you want to use
      private_key = file("~/.ssh/id_rsa") # Path to your private SSH key
      host        = google_compute_instance.vm_instance.network_interface[0].access_config[0].nat_ip
    }

    inline = [
      "sudo apt-get update -y",
      "sudo apt-get install nginx -y",
      "sudo systemctl start nginx",
      "sudo systemctl enable nginx"
    ]
  }

  tags = ["nginx"]
}

output "instance_ip" {
  value = google_compute_instance.vm_instance.network_interface[0].access_config[0].nat_ip
}

save the file :wq enter
Run the commands

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply

# user the output ip and check weather you can access the web page..

terraform destroy

